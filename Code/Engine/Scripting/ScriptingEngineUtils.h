#pragma once

#include <string>

#include <mono/metadata/assembly.h>

namespace sad::cs
{
	/**
	 * @brief Utilities used for driving the scripting engine and Mono
	*/
	class ScriptingEngineUtils
	{
	public:
		/**
		 * @brief Reads the bytes of a file (or specifically a .dll) into a char array 
		 * @param filePath Path indicating the file to read
		 * @param outputSize Pointer to an unsigned int that will contain the size of the buffer allocated
		 * @return Allocated buffer containing the file's byte data
		 * @todo Move into core::FileUtils when appropriate (or when it could be multi-purposed)
		 * @note Warning: This performs allocation, remember to `delete` returned data
		*/
		static char* ReadBytes(const std::string& filePath, uint32_t* outputSize);

		/**
		 * @brief Loads a CSharp assembly (.dll) at a given path
		 * @param assemblyPath Path to the assembly required for loading
		 * @return Raw pointer generated by Mono representing the assembly metadata and information
		*/
		static MonoAssembly* LoadCSharpAssembly(const std::string& assemblyPath);
		
		/**
		 * @brief Prints assembly types to the log
		 * @param assembly Raw pointer to assembly in Mono
		*/
		static void PrintAssemblyTypes(MonoAssembly* assembly);
	};
}
